from termcolor import colored


# 1. Transcribir los siguientes seudocódigos a python3

def secuencial_02():
    soles: float = float(input(colored('Ingrese Monto en Soles : ', 'cyan')))
    print(colored('DOLAR : ', 'yellow'), soles / 2.7)
    print(colored('EURO : ', 'yellow'), soles / 4)


def condicional_05():
    num = int(input('Ingrese Número : '))
    c1 = (num - (num % 100)) / 100
    r1 = num % 100
    c2 = (r1 - (r1 % 10)) / 10
    r2 = r1 % 10

    if num == ((r2 * 100) + (c2 * 10) + c1):
        print(colored('NÚMERO CAPICÚO', 'cyan'))
    else:
        print(colored('NÚMERO NO CAPICÚO', 'red'))


def num_cifras():
    num = int(input('Numero: '))
    if num > 99:
        print(colored('ERROR... EL NUMERO SUPERA LAS 2 CIFRAS', 'red'))
    else:
        if num < 10:
            print("LE FALTA ", colored(10 - num, 'yellow'), " PARA 2 CIFRAS")
        else:
            print('LE FALTA ', colored(100 - num, 'cyan'), ' PARA 3 CIFRAS')


def repetitivos_01():
    num = int(input('Ingrese un numero del 1 - 12 : '))

    for cont in (1, 12):
        print(cont, " * ", num, " = ", colored((cont * num), 'green'))


def repetitivos_08():
    palabra: chr = ""
    producto = ""
    monto: float = 0
    total: float = 0
    descuento = 0

    while palabra.upper() != 'N':
        producto = input('ingrese nombre producto : ')
        monto = int(input('ingrese precio venta : '))
        total += monto
        palabra = input('Desea continuar (S/N ) ')

    print('Monto total de la compra: ', total)

    if total > 500:
        descuento = total * 0.20
        print('Descuento generado 20 : ', descuento)
    else:
        descuento = total * 0.05
        print('Descuento generado 5% : ', descuento)

    print('Total a pagar : ', total - descuento)


# 2 Se necesita un control de horas trabajadas diarias, para calcular el pago diario de un trabajador, donde:

def payment_work_for_payment():
    paymeny_day = 50  # 8 horas

    total_hours = int(input('Ingrese el total de horas: '))
    message = 'Tu pago es:  S/.'

    if total_hours >= 8:
        if total_hours == 8:
            print(message, paymeny_day)
        elif total_hours == 9:  # 1 HORA
            print(message, paymeny_day + (paymeny_day * 0.1))
        elif total_hours == 10:  # 2 HORAS
            print(message, paymeny_day + (paymeny_day * 0.3))
        elif total_hours == 11:  # 3 HORAS
            print(message, paymeny_day + (paymeny_day * 0.4))
        elif total_hours == 12:  # 4 HORAS
            print(message, paymeny_day + (paymeny_day * 0.6))
        elif total_hours == 13:  # 5 HORAS
            print(message, paymeny_day + (paymeny_day * 0.8))
    else:
        # new_total_hours = 8 - total_hours;
        if total_hours >= 3:
            print(message, paymeny_day - (paymeny_day * 0.25))
        elif total_hours >= -2:
            print(message, paymeny_day - (paymeny_day * 0.75))




# 3
def voal_letter():
    key = str(input('Ingresar una letra o vocal: ')).lower()
    mssg = 'Es vocal'
    if(len(key) == 1):
        switcher = {
            'a': mssg,
            'e': mssg,
            'i': mssg,
            'o': mssg,
            'u': mssg
        }
        print (switcher.get(key, "No es vocal"))
    else:
        print('No se puede procesar el dato!')

# 4
def range_number():
    total_par = 0
    total_impar = 0
    x = 1
    while x <= 100:
        if (x % 2 == 1):  # impar
            total_impar += x
        else:
            total_par += x
        x += 1

    print('Suma total de numeros pares: ', total_par)
    print('Suma total de numeros impares: ', total_impar)
    print('Suma total de los numeros pares e impares: ', total_impar + total_par)


# 5

def piggy_bank():
    total_money = float(input('Hola! ¿Cuanto quiere ahorrar? => ')) or 0
    money_saving = 0

    while money_saving < total_money:
        money_saving += int(input('Tu ahorro? =>'))

    print('Has logrado tu objetivo tu ahorro total es =>', money_saving)


if __name__ == '__main__':
    # secuencial_02()
    # condicional_05()
    # num_cifras()
    # repetitivos_01()
    # repetitivos_08()
    voal_letter()
    # payment_work_for_payment()
    # range_number()
    # piggy_bank()
